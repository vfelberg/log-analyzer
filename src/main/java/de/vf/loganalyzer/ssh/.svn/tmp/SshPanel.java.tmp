package com.smeet.loganalyzer.ssh;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.lang.String.format;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JScrollPane;

import com.smeet.loganalyzer.OutputListener;
import com.smeet.util.StringUtils;
import com.smeet.util.collections.CollectionFactoryUtils;
import com.smeet.util.collections.CollectionUtils;

public final class SshPanel extends JPanel implements ActionListener, OutputListener {
    private static final String DEFAULT_SEARCH_PATTERN = CollectionUtils.join(CollectionFactoryUtils.list(
            "Access attempt to an invalid video",
            "BillingAccountNotFoundException",
            "ConcurrentModificationException",
            "IllegalArgumentException",
            "IllegalStateException",
            "No Hibernate Session",
            "NonUniqueObjectException",
            "NullPointerException",
            "UnsupportedOperationException",
            "UserNotVerifiedException",
            "WarningException: Counter"), "\\|");

    private final SshClient _sshClient;

    private final String DEFAULT_FILE_NAME_PATTERN;

    //grep -H -n 'NullPointerException' smeet-web.log.1 | sed 's/^/GREP_OUTPUT:/g'
    //awk 'NR >= 594520; NR == 594560 {exit}' smeet-web.log.1 | sed 's/^/VIEW_OUTPUT:/g'

    private JTextField _textField;

    private JTextArea _generalOutputArea;

    public SshPanel(SshClient sshClient, String baseLogFileName) {
        super(new GridBagLayout());
        _sshClient = sshClient;

        List<String> _recentLogFiles = new ArrayList<String>();
        _recentLogFiles.add(baseLogFileName);
        for (int i = 1; i <= 5; i++) {
            _recentLogFiles.add(baseLogFileName + "." + i);
        }
        DEFAULT_FILE_NAME_PATTERN = CollectionUtils.join(_recentLogFiles, " ");
    }

    public void init() {
        _sshClient.addOutputListener(this);

        _textField = new JTextField(25);
        _textField.addActionListener(this);

        _generalOutputArea = new JTextArea(10, 80);
        _generalOutputArea.setEditable(false);

        GridBagConstraints constraints = new GridBagConstraints();
        constraints.gridx = 0;
        constraints.gridy = 0;
        constraints.fill = GridBagConstraints.HORIZONTAL;
        constraints.insets = new Insets(5, 5, 5, 5);
        constraints.weightx = 1.0;
        constraints.weighty = 0.0;
        add(_textField, constraints);

        constraints.gridx = 0;
        constraints.gridy = 1;
        constraints.fill = GridBagConstraints.BOTH;
        constraints.insets = new Insets(5, 5, 5, 5);
        constraints.weightx = 1.0;
        constraints.weighty = 0.8;
        add(new JScrollPane(_generalOutputArea), constraints);
    }

    public void destroy() {
        _sshClient.destroy();
    }

    @Override
    public void actionPerformed(ActionEvent event) {
        String text = _textField.getText() + "\n";
        _sshClient.sendText(text);
    }

    @Override
    public void onOutput(String output) {
        _generalOutputArea.append(output);
        _generalOutputArea.setCaretPosition(_generalOutputArea.getDocument().getLength());
    }

    public void search(String searchPattern, String fileNamePattern) {
        if (StringUtils.isBlank(searchPattern)) {
            searchPattern = DEFAULT_SEARCH_PATTERN;
        }
        if (StringUtils.isBlank(fileNamePattern)) {
            fileNamePattern = DEFAULT_FILE_NAME_PATTERN;
        }
        String text = format("grep -H -n \"%s\" %s | sed \"s/^/GREP_OUTPUT:%s:/g\"\n", searchPattern, fileNamePattern, _sshClient.getHost());
        _sshClient.sendText(text);
    }

    public void clearOutput() {
        _generalOutputArea.setText("");
    }

    public SshClient getSshClient() {
        return _sshClient;
    }
}
